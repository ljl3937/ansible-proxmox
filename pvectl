#!/usr/bin/python3
#coding=utf-8 
import os, ssl
import urllib.request, json
import yaml
from telnetClient import TelnetClient
import subprocess
import re

def get_exists_ports(node):
    state,output = subprocess.getstatusoutput("sshpass -p a10networks ssh root@%s \"netstat -anp|grep 123|grep kvm\"" % node)
    lines = output.split("\n")
    ports = []
    lines = [item for item in filter(lambda x:x != '', lines)]
    print("lines:%s" % lines)
    if len(lines) != 0:
        for line in lines:
            strs = re.split(r"[ ]+", line)
            port = strs[3].split(":")[1]
            ports.append(port)
    return ports

# get pve ticket
def getTicket(urlBase, user, password):
    try:
        url = urlBase + 'access/ticket'
        params = {'username':  user, 'password':  password}        
        post = urllib.parse.urlencode(params).encode(encoding='UTF8')        
        headers = {"Accept": "application/json"}        
        request = urllib.request.Request(url, post, headers)        
        response = urllib.request.urlopen(request)        
        fields = json.loads(response.read().decode('utf-8'))
        ticket = fields['data']['ticket']
        csrf_token = fields['data']['CSRFPreventionToken']
        return ticket, csrf_token
    except Exception as e:        
        print('get cluster '+  alias +' ticket error!')        
        print(e)        
        os._exit(1)
# get info from ticket
def getInfo(urlExt, ticket, csrf_token, method):    
    try:        
        url = urlBase + urlExt        
        print('')        
        print('from ' + url + ' get info')        
        headers = {"Accept": "application/json", "Cookie": "PVEAuthCookie=%s" % ticket}
        request = urllib.request.Request(url, method=method)        
        request.add_header("CSRFPreventionToken", csrf_token)
        for k,v in headers.items():            
            request.add_header(k, v)        
        response = urllib.request.urlopen(request)
        fields = json.loads(response.read().decode('utf-8'))
        return fields['data']
    except Exception as e:
        print('from ' + url + ' get info error: ' + e)
# set test bed file
def set_tcl_args(args):
    f1 = open('AXSoftVM01TBCfg.tcl','r',encoding="utf-8")  
    lines = f1.readlines()
    #print(f1.tell()) 
    f1.seek(0) 
    lines_b = []
    for line in lines:
        if " " in line:
            for key in args.keys():
                strs = line.split(" ")
                if key == strs[1]:
                    strs[2] = args[key]
                    line = " ".join(strs)+"\n"
                    #f1.write(line + "\n")
                    print(line)
                    break
            lines_b.append(line)

    f2 = open("AXSoftVM1001TBCfg.tcl", mode="w", encoding="utf-8")
    f2.writelines(lines_b) 
    f2.close()
    f1.close()  # 关闭文件
def reset_args(args, qemus, cts, exists_ports):
    max = 0
    old414 = args["args_414"]
    old502 = args["args_502"]
    args["args_414"] = []
    args["args_502"] = []
    args["vmids"] = []
    max_port = 12340
    for eport in exists_ports:
        if max_port < int(eport):
            max_port = int(eport)
    for qemu in qemus:
        if max < int(qemu["vmid"]):
            max = int(qemu["vmid"])
    for ct in cts:
        if max < int(ct["vmid"]):
            max = int(ct["vmid"])
    for k in range(args["ctnum"]):
        for ubuntu in args["ubuntus"]:
            ubuntu["vmid"] = max + 1
            max += 1
    for i in range(args["num_414"]):
        tmp = {
            "vmid": max+1,
            "port": max_port+1,
            "manage_ip": old414[i]["manage_ip"],
            "data_ip": old414[i]["data_ip"]
        }
        args["args_414"].append(tmp)
        args["vmids"].append(max+1)
        max += 1
        max_port += 1
    for j in range(args["num_502"]):
        tmp = {
            "vmid": max+1,
            "port": max_port+1,
            "manage_ip": old502[j]["manage_ip"],
            "data_ip": old502[j]["data_ip"]
        }
        args["args_502"].append(tmp)
        args["vmids"].append(max+1)
        max += 1
        max_port += 1
    return args
def start_ansible():
    output = os.system("ansible-playbook -ihosts main.yml -v")
    return output

if __name__ == '__main__':    
    stream = open("group_vars/all_tpl.yml", mode="r",encoding="utf-8")
    args = yaml.load(stream,Loader=yaml.Loader)
    print(args)
    #use ssl ca，need to permit    
    ssl._create_default_https_context = ssl._create_unverified_context    
    #use list for authoritation    
    # pveLogin = ['pve', '192.168.1.88', 8006, 'root@pam', '12345678']    
    pveLogin = ['pve', '10.12.1.105', 8006, 'root@pam', 'a10networks']    
    alias = pveLogin[0]    
    host = pveLogin[1]    
    port = pveLogin[2]    
    user = pveLogin[3]    
    password = pveLogin[4] 
    urlBase = 'https://{}:{}/api2/json/'.format(host, port)    
    pveTicket, csrf_token = getTicket(urlBase, user, password)
    # get vms info
    qemus = getInfo('nodes/to-colo-pve05/qemu', pveTicket, csrf_token, 'GET')
    # print(qemus)
    cts = getInfo('nodes/to-colo-pve05/lxc', pveTicket, csrf_token, 'GET')
    # set all.yml
    exists_ports = get_exists_ports(args["node"])
    args = reset_args(args,qemus,cts,exists_ports)
    stream2 = open("group_vars/all.yml", mode="w", encoding="utf-8")
    yaml.dump(args, stream2, allow_unicode=True)

    stream2.close()
    stream.close()
    set_tcl_args(args["testbedargs"])
    start_ansible()

    host_ip = args["node"]
    username = 'admin'
    password = 'a10'
    telnet_client = TelnetClient()
    for arg in args["args_414"]:
        if telnet_client.login_host(host_ip,username,password,arg["port"]):
            telnet_client.set_manage_network(arg["manage_ip"])
            telnet_client.set_data_network(arg["data_ip"])
            telnet_client.logout_host()
    for arg in args["args_502"]:
        if telnet_client.login_host(host_ip,username,password,arg["port"]):
            telnet_client.set_manage_network(arg["manage_ip"])
            telnet_client.set_data_network(arg["data_ip"])
            telnet_client.logout_host()
